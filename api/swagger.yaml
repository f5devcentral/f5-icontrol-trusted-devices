openapi: 3.0.1
info:
  title: Trusted Device Services
  description: '
  <p>
  <table>
  <tr><td>
  <h3>Trusted Devices Tutorials</h3>
  <a href="/TrustedDevicesUI/docs/index.html?urls.primaryName=Querying%20Trusts" alt="Load Tutorial" class="link">Querying Trusts - Discover Trusted Devices</a></br>
  <a href="/TrustedDevicesUI/docs/index.html?urls.primaryName=Declaring%20Trusts" alt="Load Tutorial" class="link">Declaring Trusts - Declarative API for Trusted Devices</a></br>
  <a href="/TrustedDevicesUI/docs/index.html?urls.primaryName=Adding%20Trusts" alt="Load Tutorial" class="link">Adding Trusts - Imperatively Add Trusted Devices </a></br>
  <a href="/TrustedDevicesUI/docs/index.html?urls.primaryName=Deleting%20Trusts" alt="Load Tutorial" class="link">Deleting Trusts - Imperatively Delete Trusted Devices</a></br>  
  <h3>Trusted Proxy Tutorials</h3>
  <a href="/TrustedDevicesUI/docs/index.html?urls.primaryName=Retrieving%20Time%20Limited%20Access%20Tokens" alt="Load Tutorial" class="link">Retrieving Time Limited Access Tokens for Trusted Devices</a></br>
  <a href="/TrustedDevicesUI/docs/index.html?urls.primaryName=Clearing%20Access%20Token%20Cache" alt="Load Tutorial" class="link">Clearing Access Token Cache</a></br> 
  <a href="/TrustedDevicesUI/docs/index.html?urls.primaryName=Proxying%20iControl%20REST%20Requests%20to%20Trusted%20Devices" alt="Load Tutorial" class="link">Proxying iControl REST Requests to Trusted Devices</a> 
  <h3>Container Endpoints</h3>
  <a href="/config" alt="Configure Published NGINX Applications" class="link">NGINX Unit Configuration Endpoint</a></br>
  <a href="/mgmt" alt="F5 iControl REST iControl REST Services" class="link">iControl REST Services</a></br>
  </td>
  <td>
  <img alt="TrustedDeviceServices" src="/TrustedDevicesUI/static/images/TrustedDevicesApplication640x360.png">
  </td>
  </tr>
  </table>
  </p>
  '
  contact:
    email: support@f5.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: /
  - url: https://localhost:8443/
  - url: https://{host}:{port}/
    variables:
      host:
        default: localhost
        description: The host to issue requests
      port:
        default: '443'
        description: The host port to issue requests
security:
  - BasicAuth: []
  - BearerAuth: []
  - ApiKeyAuth: []
tags:
- name: Trust Services
  description: Management trusts between TMOS devices
- name: Proxy Services
  description: Proxy iControl REST requests or get trusted tokens for trusted TMOS devices
- name: SSH Key Services
  description: Copy SSH keys to the gateway and authorize them on remote TMOS devices
paths:
  /TrustedDevices:
    get:
      tags:
      - Trust Services
      summary: retrieve defined device trusts optionally matching filters
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: getTrusts
      parameters:
        - name: targetUUID
          in: query
          description: Filter output to the matching targetUUID
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: targetHost
          in: query
          description: Filter output to the matching targetHost
          required: false
          schema:
            type: string
      responses:
        200:
          description: Retrieved Devices
          content:
            application/json:
              schema:
                type: object
                properties:
                  devices:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeclaredDevices'
        401:
          description: Unauthorized
        404:
          description: No devices found
          content: 
            application/json:
              schema:
                type: string
                example: 'trusted devices not found'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'invalid targetUUID'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
      x-swagger-router-controller: TrustedDevicesController
    put:
      tags:
      - Trust Services
      summary: add devices to trust
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: addTrusts
      requestBody:
        description: Add declared devices to existing trusts
        content:
          application/json:            
            schema:
              type: object
              properties:
                devices:
                  type: array
                  items:
                    oneOf:
                      - $ref: '#/components/schemas/CreateDevicesUsernamePassphrase'
                      - $ref: '#/components/schemas/CreateDevicesSSHKey'
        required: true
      responses:
        202:
          description: Declaration accepted
          content:
            application/json: {}
        400:
          description: Invalid device declaration
          content:
            application/json:
              schema:
                type: string
        401:
          description: Unauthorized
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'missing targetUsername'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
      x-swagger-router-controller: TrustedDevicesController
    post:
      tags:
      - Trust Services
      summary: declare device trusts
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: declareTrusts
      requestBody:
        description: Declare all trusts
        content:
          application/json:            
            schema:
              type: object
              properties:
                devices:
                  type: array
                  items:
                    oneOf:
                      - $ref: '#/components/schemas/CreateDevicesUsernamePassphrase'
                      - $ref: '#/components/schemas/CreateDevicesSSHKey'
        required: true
      responses:
        202:
          description: Declaration accepted
          content:
            application/json: {}
        400:
          description: Invalid device declaration
          content:
            application/json:
              schema:
                type: string
        401:
          description: Unauthorized
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'missing targetUsername'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
      x-swagger-router-controller: TrustedDevicesController
    delete:
      tags:
      - Trust Services
      summary: delete device from existing trusts matching filters
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: deleteTrust
      parameters:
        - name: targetUUID
          in: query
          description: Delete trust matching targetUUID
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: targetHost
          in: query
          description: Delete trust(S) matching targetHost
          required: false
          schema:
            type: string
        - name: targetPort
          in: query
          description: Delete trust matchin targetHost and targetPort
          required: false
          schema:
            $ref: '#/components/schemas/tcpPort'
      responses:
        202:
          description: Request accepted 
          content:
            application/json: {}
        401:
          description: Unauthorized
        404:
          description: No devices found
          content:
            application/json: {}
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'invalid targetUUID'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
    x-swagger-router-controller: TrustedDevicesController
  /TrustedDevices/{targetUUID}:
    get:
      tags:
      - Trust Services
      summary: retrieve defined device trusts matching the targetUUID
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: getTrust
      parameters:
        - name: targetUUID
          in: path
          description: Filter output to the matching targetUUID
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Retrieved Devices
          content:
            application/json:
              schema:
                type: object
                properties:
                  devices:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeclaredDevices'
        401:
          description: Unauthorized
        404:
          description: No devices found
          content: {}
        405:
          description: Validation exception
          content: {}
        500:
          description: System exception
      x-swagger-router-controller: TrustedDevicesController
    delete:
      tags:
      - Trust Services
      summary: delete device from existing trusts matching the targetUUID
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: deleteTrustByUUID
      parameters:
        - name: targetUUID
          in: path
          description: Delete trust matching targetUUID
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        202:
          description: Request accepted 
          content:
            {}
        401:
          description: Unauthorized
        404:
          description: No devices found
          content: {}
        405:
          description: Validation exception
          content: {}
        500:
          description: System exception
    x-swagger-router-controller: TrustedDevicesController
  /TrustedProxy:
    get:
      tags:
      - Proxy Services
      summary: retrieve trust token for trusted TMOS devices
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: getTrustToken
      parameters:
        - name: targetUUID
          in: query
          description: Filter output to the matching targetUUID
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: targetHost
          in: query
          description: Filter output to the matching targetHost
          required: false
          schema:
            type: string
      responses:
        200:
          description: Retrieved Tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceToken'
        401:
          description: Unauthorized
        404:
          description: No devices found
          content: 
            application/json:
              schema:
                type: string
                example: 'trusted devices not found'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'invalid targetUUID'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
    delete:
      tags:
      - Proxy Services
      summary: delete all cached tokens for trusted TMOS devices
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: flushTokenCache
      responses:
        200:
          description: Token Cache Flushed
        401:
          description: Unauthorized
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
    x-swagger-router-controller: TrustedProxyController
  /TrustedProxy/{targetUUID}:
    get:
      tags:
      - Proxy Services
      summary: retrieve trust token for trusted TMOS devices
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: getTrustTokenByUUID
      parameters:
        - name: targetUUID
          in: path
          description: Filter output to the matching targetUUID
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Retrieved Token
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceToken'
        401:
          description: Unauthorized
        404:
          description: No devices found
          content: 
            application/json:
              schema:
                type: string
                example: 'trusted devices not found'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'invalid targetUUID'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
    delete:
      tags:
      - Proxy Services
      summary: delete cached token for a TMOS devices
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: flushTokenCacheByUUID
      parameters:
        - name: targetUUID
          in: path
          description: Filter output to the matching targetUUID
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Flushed Token
        401:
          description: Unauthorized
        404:
          description: No devices found
          content: 
            application/json:
              schema:
                type: string
                example: 'trusted devices not found'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'invalid targetUUID'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
    x-swagger-router-controller: TrustedProxyController
  /TrustedProxy/proxy/{targetUUID}/{iControlRESTPath}*:
    get:
      tags:
      - Proxy Services
      summary: proxy a GET iControl REST API request to a trusted Host
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: getiControlRESTProxy
      parameters:
        - name: targetUUID
          in: path
          description: Filter output to the matching targetUUID
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: iControlRESTPath
          in: path
          description: The iControl REST API path on the remote trusted device
          required: true
          schema:
            type: string
      responses:
        200:
          description: iControl REST API response
          content:
            application/json: {}
        401:
          description: Unauthorized
        404:
          description: No devices found
          content: 
            application/json:
              schema:
                type: string
                example: 'trusted devices not found'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'invalid targetUUID'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
      x-swagger-router-controller: TrustedProxyController
    patch:
      tags:
      - Proxy Services
      summary: proxy a PATCH iControl REST API request to a trusted Host
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: patchiControlRESTProxy
      parameters:
        - name: targetUUID
          in: path
          description: Filter output to the matching targetUUID
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: iControlRESTPath
          in: path
          description: The iControl REST API path on the remote trusted device
          required: true
          schema:
            type: string
      requestBody:
        description: the iControl REST request body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleRequestBody'
      responses:
        200:
          description: iControl REST API response
          content:
            application/json: {}
        401:
          description: Unauthorized
        404:
          description: No devices found
          content: 
            application/json:
              schema:
                type: string
                example: 'trusted devices not found'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'invalid targetUUID'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
      x-swagger-router-controller: TrustedProxyController
    post:
      tags:
      - Proxy Services
      summary: proxy an iControl REST API request to a trusted Host
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: postiControlRESTProxy
      parameters:
        - name: targetUUID
          in: path
          description: Filter output to the matching targetUUID
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: iControlRESTPath
          in: path
          description: The iControl REST API path on the remote trusted device
          required: true
          schema:
            type: string
      requestBody:
        description: the iControl REST request body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleRequestBody'
      responses:
        200:
          description: iControl REST API response
          content:
            application/json: {}
        401:
          description: Unauthorized
        404:
          description: No devices found
          content: 
            application/json:
              schema:
                type: string
                example: 'trusted devices not found'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'invalid targetUUID'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
      x-swagger-router-controller: TrustedProxyController
    put:
      tags:
      - Proxy Services
      summary: proxy an iControl REST API request to a trusted Host
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: putiControlRESTProxy
      parameters:
        - name: targetUUID
          in: path
          description: Filter output to the matching targetUUID
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: iControlRESTPath
          in: path
          description: The iControl REST API path on the remote trusted device
          required: true
          schema:
            type: string
      requestBody:
        description: the iControl REST request body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleRequestBody'
      responses:
        200:
          description: iControl REST API response
          content:
            application/json: {}
        401:
          description: Unauthorized
        404:
          description: No devices found
          content: 
            application/json:
              schema:
                type: string
                example: 'trusted devices not found'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'invalid targetUUID'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
      x-swagger-router-controller: TrustedProxyController
    delete:
      tags:
      - Proxy Services
      summary: proxy an iControl REST API request to a trusted Host
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: deleteiControlRESTProxy
      parameters:
        - name: targetUUID
          in: path
          description: Filter output to the matching targetUUID
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: iControlRESTPath
          in: path
          description: The iControl REST API path on the remote trusted device
          required: true
          schema:
            type: string
      responses:
        200:
          description: iControl REST API response
          content:
            application/json: {}
        401:
          description: Unauthorized
        404:
          description: No devices found
          content: 
            application/json:
              schema:
                type: string
                example: 'trusted devices not found'
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'invalid targetUUID'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
    x-swagger-router-controller: TrustedProxyController
  /SSHKeys:
    get:
      tags:
      - SSH Key Services
      summary: retrieve SSH keys on the the gateway
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: getSshKeys
      parameters:
        - name: sshKeyName
          in: query
          description: Filter output to the matching SSH identity file name
          required: false
          schema:
            type: string
      responses:
        200:
          description: Retrieved SSH keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: string
                example:
                  keys:
                    - id_rsa
        401:
          description: Unauthorized
        404:
          description: No SSH keys found
          content: 
            application/json:
              schema:
                type: string
                example: 'SSH keys not found'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
      x-swagger-router-controller: SshCredentialsController
    post:
      tags:
      - SSH Key Services
      summary: publish SSH private PEM key file to the gateway
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: createSshIdentityFile
      requestBody:
        description: Create an SSH identity file on the gateway. If no privateKey is defined, one will be generated.
        content:
          application/json:            
            schema:
              type: object
              properties:
                key:
                  $ref: '#/components/schemas/CreateSshIdentityFile'
        required: true
      responses:
        202:
          description: SSH identity file created
          content:
            application/json: {}
        400:
          description: Invalid private key declaration
          content:
            application/json:
              schema:
                type: string
                example: Invalid PEM formatted key
        401:
          description: Unauthorized
        405:
          description: Validation exception
          content:
            application/json:
              schema:
                type: string
                example: 'SSH key definition requires name and private key'
        409:
          description: Identity file exists
          content:
            application/json:
              schema:
                type: string
                example: 'an SSH identity file by the supplied name already exists'
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
      x-swagger-router-controller: SshCredentialsController
    delete:
      tags:
      - SSH Key Services
      summary: delete SSH identity file from the gateway
      security:
       - BasicAuth: []
       - BearerAuth: []
       - ApiKeyAuth: []
      operationId: deleteSshKey
      parameters:
        - name: sshKeyName
          in: query
          description: SSH identity file name
          required: true
          schema:
            type: string
      responses:
        202:
          description: Request accepted 
        401:
          description: Unauthorized
        404:
          description: No identity file found
        500:
          description: System exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                example:
                  errorCode: 500
                  errorMessage: 'connection timeout'
    x-swagger-router-controller: SshCredentialsController
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    CreateDevicesUsernamePassphrase:
      type: object
      required:
        - targetHost
        - targetPort
        - targetUsername
        - targetPassphrase
      properties:
        targetHost:
          description: The trusted devices targetHost definition
          type: string
        targetPort:
          $ref: '#/components/schemas/tcpPort'
        targetUsername:
          description: Username with Administrator role on the targetHost
          type: string
        targetPassphrase:
          description: Password for the targetUser
          type: string
      example:
        targetHost: 172.13.1.103
        targetPort: 443
        targetUsername: admin
        targetPassphrase: admin
    CreateDevicesSSHKey:
      type: object
      required:
        - targetHost
        - targetSshKey
      properties:
        targetHost:
          description: The trusted devices targetHost definition
          type: string
        targetPort:
          $ref: '#/components/schemas/tcpPort'
        targetUsername:
          description: The SSH session user
          type: string
          default: root
        targetSshKey:
          description: Path to the SSH key to use to establish trust
          type: string
      example:
        targetHost: 172.13.1.103
        targetSshKey: /sshkeys/id_rsa
    DeclaredDevices:
      type: object
      properties:
        targetUUID:
          $ref: '#/components/schemas/uuid'
        targetHost:
          description: The trusted devices targetHost definition
          type: string
        targetPort:
          $ref: '#/components/schemas/tcpPort'
        state:
          description: Current trust establishement state
          type: string
        targetHostname:
          description: The hostname of the trusted device
          type: string
        targetVersion:
          description: The TMOS version of the trusted device
          type: string
        targetRESTVersion:
          description: The iControl REST version installed on the trusted device
          type: string
        available:
          description: If the device trust is currently available
          type: boolean
        failedMonitors:
          description: The number of concurrent failed iControl REST monitoring attempts
          type: number
      example:
        targetUUID: 7390b3b8-7682-4554-83e5-764e4f26703c
        targetHost: 172.13.1.103
        targetPort: 443
        state: ACTIVE
        targetHostname: bigip1.openstack.local
        targetVersion: 13.1.1
        targetRESTVersion: 13.1.1-0.0.4
        available: true
        failedMonitors: 0
    DeviceToken:
      type: object
      properties:
        queryParameter:
          description: query variables to append to direct device queries as a trust token
          type: string
        timestamp:
          description: Unix timestamp for this request. Tokens are good for 10 minutes only.
          type: integer
        targetUUID:
          $ref: '#/components/schemas/uuid'
        targetHost:
          description: The trusted devices targetHost definition
          type: string
        targetPort:
          $ref: '#/components/schemas/tcpPort'
      example:
        queryParameter: em_server_ip=1.1.1.104&em_server_auth_token=32W8%2FNw2mGHRDiqIbLbVblMy3L%2FT4oMI1LvEKQK4T8s8c9qYntQjZ47peLgT4H0l6ShubKNf1ubRkzV%2F3r9yCJAp68FlCtH0HSKT%2FwukWCSvWSUU1oEdSx0gRgUUUOkDjVDer1%2BOit8MRE8L4Nh5ZoUsPfNxgEBSoFdg0VvJ5ycEJhjKd0YXfD0R%2B6Qk%2FhPHpYmXyHdwC0bRvl0%2FlBn2QvQkvyRZGLiL3r0cOemLRKFsCcLTSpQlUUM%2BhcbXuwI%2B9%2FVMv5XUnY3%2FpxfUIS7O8k%2FWDVGm2r%2FKyWI2lNlHqHbkN5owk5FW7AXBArDI0OOLvvqEfg94DkCpZF2RLwS7xQ%3D%3D
        timestamp: 1546102061136
        targetUUID: 7390b3b8-7682-4554-83e5-764e4f26703c
        targetHost: 172.13.1.103
        targetPort: 443
    CreateSshIdentityFile:
      type: object
      properties:
        name:
          type: string
        privateKey:
          type: string
      required:
       - name
      example:
        name: "id_rsa"
        privateKey: "-----BEGIN OPENSSH PRIVATE KEY-----\
MIIEpAIBAAKCAQEAvPgZD9jJL27HsNnMBcBYaPJ6cCnV4n0SFMCuUw4UBR3NX5Sv\
a4vSFzvOYVw6qvMK4CqRaB0apQUHWlWfhQeieO9vWjDagnSUNo++iXc6gKsaMOcc\
Baymv6x7qLT3c8TVJYqzy40SD5zuqe8RV/l3kdy7qJXIbHxqV4DL+soIk8D8/pmi\
IxesmZywLMDvEjpBcQDaMpMYkHSZSB1IzntllKgrD5UgGNW+JvUhfT2ZktcDOQpP\
bN3bto/6s0M74J5ujnE/3FBWsuoAXnTaaHqDYIGI3eZfepmpS+AAiph7nPjFMCHu\
8iC0xJ7QAqikPeWUjTX+BlN0rDmrYLSRrVTcywIDAQABAoIBAHc/pSkf5827/d43\
gw16FRCdO/C+JdAYlylrclbNQor8BJc1kAGxKXIp9pHwDsHEP++4TSxDeYX7h2lV\
MSZU7A2fI0jqHWpHwSQxT88V42BBGXUU0tUt38iDQ0HyeVmgM9XOEqn4KxaZNO8e\
A3bd4bu1bOL1KpZzaPQxPgfUKNd70xS29BywsjU9GCVbuSvdLGW88F961wz1vQja\
hAft/sYeY3sZkyJBG9dXtT5gSjCdTTyPFHvTM3o8dleumP+23bG/VmGfK+Ge6VXG\
4XNFFlEKh+X0hWfxVinZA/rq67yoPfZqEEUuov2r2qRWeW3vGKFyiT3caQuZYivg\
DCZnfRkCgYEA5VZpWIIHEC4EvX8qHF5cp46nljPuEc5QukuJpGtx52RMAF3CK4Mt\
Dvey63nW+7Km6I/+gfi8Ydl59V3Mrz0JHM/JwBW7/pUs9NSGXAdXGALe7YaHBwVy\
ey4Fj9fdAPINS4FLFiDwftV3BgM2YfnC4C+VBFjn8TW0bMFHwtEv2KUCgYEA0vA7\
3sRi4HYSRCkWNDEIFNyNgjB0S5+WvS3p8aKmzrnxudd1fCJmSJaz3K26VtVqDLin\
xACIzcwgMya/W7FVBW46NSY2LCyzc2pJd30xvuFor/N0/WACdEXiB72qHLZSat3A\
zNNZZdyLBOHVJtxIWUIFNkNB4uaATnFbkAKRdK8CgYEAoXMw3H9Fa62J5sG0Kp5/\
ifISptpOGjjtegkdkCOX33crTgKzZCCHwwa77awrnawKdqSQXn12WUhZ5FOxehh0\
5tSdSl3CqBnquT04jWcZeCzlNcBEJLw/+NnQTpB/5F+C3onaC20LAa9TiGcQjO7g\
sySsOpBAUP4m031KAKt1jIUCgYEAonC4Wlv4HQ0wEedmHvknVRFntDtmQ5p5deQ2\
xYtRU9+kBE6lPdwr0nijuCzdU+NzkKpfH7SdpYYtwdZ0BMOySsVQ8/8iNrCR3S6b\
tvXlai6h9OXSUREvsqTiZL2tlADfxUZSJCoaLTRCppbXE98NpBcQdnIi+f4yDraD\
IYqowycCgYBrUivv2s2e9kDqvLt85OT86KPqHeTtcyls0IJB6JkcSXHhlVfu67+Z\
GyjZ+1V2UZoiH2MjSS1U0MC3teXlHQnM+EzzyQ/tuOrcgfN13+jVf539Psv2kvkg\
XkvQj53bHArIzZCSojeGcH4Z+yw4eYwh8KGgIZ7YRW/lZ3FBrF11Nw==\
-----END OPENSSH PRIVATE KEY-----"
    SampleRequestBody:
      type: object
      additionalProperties: true
      example:
       {}
    uuid:
      type: string
      description: UUID4 Id string
      pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    tcpPort:
      type: integer
      description: TCP port number
      minimum: 1
      maximum: 65535
